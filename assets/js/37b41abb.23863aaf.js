"use strict";(self.webpackChunksoftware_engineering=self.webpackChunksoftware_engineering||[]).push([[3745],{6405:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"spring/jpa-projections","title":"Projections","description":"TBD - will be tell benefits and usage of spring data projections","source":"@site/software-development/spring/jpa-projections.md","sourceDirName":"spring","slug":"/spring/jpa-projections","permalink":"/engineering-handbook/software-development/spring/jpa-projections","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Batch Update In Jpa","permalink":"/engineering-handbook/software-development/spring/jpa-batch-update"},"next":{"title":"Parallel Tasks In Spring Boot","permalink":"/engineering-handbook/software-development/spring/spring-parallel-tasks"}}');var i=r(4848),a=r(8453);const s={},o="Projections",d={},l=[];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"projections",children:"Projections"})}),"\n",(0,i.jsx)(n.p,{children:"TBD - will be tell benefits and usage of spring data projections"}),"\n",(0,i.jsx)(n.p,{children:"When we are using Spring Data JPA, If we want to fetch specific fields of an entity which is contains many relationships and fields we would all get all those unnecessary fields if we get the entity itself by repository method like getEntityById we will get unnecessary fields as well."}),"\n",(0,i.jsx)(n.p,{children:"It will leads to overhead resource usage in the database and our application because of unused data will load to memory."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Bu bir ",(0,i.jsx)(n.strong,{children:"bilgilendirme"})," kutusu."]})}),"\n",(0,i.jsx)(n.p,{children:"Let's say we have an order entities which have products in one to may relationship."}),"\n",(0,i.jsx)(n.p,{children:"A\u015fa\u011f\u0131da ki gibi iki bir entity class\u2019\u0131m\u0131z oldu\u011funu d\xfc\u015f\xfcn\xfcelim. Order i\xe7inde order date ve o order'a ait product'lar\u0131 alan bir query laz\u0131m."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Order {\n\t@ManyToOne()\n\tprivate Collection<OrderItem> orderItems;\n\tprivate LocalDateTime orderDate;\n\tprivate Collection<Product> products;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Entity(name="product")\npublic class Product {\n\tprivate Long id;\n\t@OneToMany(mappedBy= "order")\n\tprivate Order order;\n\tprivate BigDecima\u015f price;\n\tprivate String productName;\n\tprivate ProductType productType;\n}\n'})}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n  Mermaid --\x3e Diagram"})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);